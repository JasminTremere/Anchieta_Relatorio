import streamlit as st
import pandas as pd
import plotly.express as px

# -------------------------------
#icon_url = "https://github.com/JasminTremere/Anchieta_Relatorio/blob/main/icone_header.png"

st.set_page_config(
    page_title="Dashboard de An√°lise Anchieta!", 
    page_icon="üìä",
    layout="wide"
)

st.title("Dashboard de An√°lise Anchieta!")
st.markdown("An√°lise de assuntos extra√≠dos em CSV do Blip.")

# --------------------------------------------------------------------------------------------------------------------------------

try: 
    # DataFrame EAD
    df_ead_raw = pd.read_csv(
        'https://raw.githubusercontent.com/JasminTremere/Anchieta_Relatorio/main/dados_ead.csv', 
        sep=';', 
        encoding='latin1', 
        header=None,
        names=['Acoes_Total_Raw', 'Extra1', 'Extra2', 'Extra3', 'Extra4', 'Extra5'], 
        on_bad_lines='skip' 
    )
    df_ead = df_ead_raw.iloc[1:].copy() 
    df_ead.columns = ['A√ß√µes,%,Total', 'Extra1', 'Extra2', 'Extra3', 'Extra4', 'Extra5']
    
    # DataFrame PRESENCIAL/SEMI
    df_pres_semi_raw = pd.read_csv(
        'https://raw.githubusercontent.com/JasminTremere/Anchieta_Relatorio/main/dados_pres_semi.csv', 
        sep=';', 
        encoding='latin1', 
        header=None, 
        names=['Acoes_Total_Raw', 'Extra1', 'Extra2', 'Extra3', 'Extra4', 'Extra5'],
        on_bad_lines='skip'
    )
    df_pres_semi = df_pres_semi_raw.iloc[1:].copy()
    df_pres_semi.columns = ['A√ß√µes,%,Total', 'Extra1', 'Extra2', 'Extra3', 'Extra4', 'Extra5']

    # DataFrame SUPORTE EAD
    df_sup_ead_raw = pd.read_csv(
        'https://raw.githubusercontent.com/JasminTremere/Anchieta_Relatorio/main/sup_ead.csv', 
        sep=';', 
        encoding='latin1', 
        header=None, 
        names=['Acoes_Total_Raw', 'Extra1', 'Extra2', 'Extra3', 'Extra4', 'Extra5'],
        on_bad_lines='skip'
    )
    df_sup_ead = df_sup_ead_raw.iloc[1:].copy()
    df_sup_ead.columns = ['A√ß√µes,%,Total', 'Extra1', 'Extra2', 'Extra3', 'Extra4', 'Extra5']

    # DataFrame SUPORTE PRESENCIAL/SEMI
    df_sup_pres_semi_raw = pd.read_csv(
        'https://raw.githubusercontent.com/JasminTremere/Anchieta_Relatorio/main/sup_pres_semi.csv', 
        sep=';', 
        encoding='latin1', 
        header=None, 
        names=['Acoes_Total_Raw', 'Extra1', 'Extra2', 'Extra3', 'Extra4', 'Extra5'],
        on_bad_lines='skip'
    )
    df_sup_pres_semi = df_sup_pres_semi_raw.iloc[1:].copy()
    df_sup_pres_semi.columns = ['A√ß√µes,%,Total', 'Extra1', 'Extra2', 'Extra3', 'Extra4', 'Extra5']


except pd.errors.ParserError as e:
    st.error(f"Erro ao tentar ler um dos arquivos CSV! Detalhes do erro: {e}")
    st.stop()
except Exception as e:
    st.error(f"Erro ao carregar dados: Verifique se os arquivos existem no GitHub. Detalhes: {e}")
    st.stop()

# --------------------------------------------------------------------------------------------------------------------------------
## Processamento DataFrames (Ead)

df_colunas = df_ead['A√ß√µes,%,Total'].str.split('|', expand=True).iloc[:, :3]
df_colunas.columns = ['Nome', 'Telefone', 'Assunto']

df_colunas['Nome'] = df_colunas['Nome'].str.replace('Nome:', '', regex=False).str.strip()
df_colunas['Telefone'] = df_colunas['Telefone'].str.replace('Telefone:', '', regex=False).str.strip()
df_colunas['Assunto'] = df_colunas['Assunto'].str.replace('Assunto:', '', regex=False).str.strip()

df_ead_limpo = df_colunas.copy()
df_ead_limpo['Tipo'] = 'Outros EAD' 


category_patterns = {
    # Categoria Atendimento
    'Atendimento Humano': ['falar com atendente','atendente','consultor','quero falar com algu√©m','quero falar com uma pessoa'],
    # Categoria Cola√ß√£o de grau/Conclus√£o de Curso
    'Cola√ß√£o de grau/Conclus√£o de Curso': ['Conclus√£o','conclus√£o','Cola√ß√£o de grau','cola√ß√£o de grau','Terminar','Formatura','Cola√ß√£o','Colacao','colacao','cola√ß√£o','formatura'],
    # Categoria de Ativdades Complementares
    'Atividades Complementares':['Hora','hora','Horas','horas','atividade complementar',' Atividade complementar','Hora complementar','Atividades complementares','atividades complementares'],
    # Categoria De Perguntas sobre o Curso
    'Sobre Curso': ['Meu curso','meu curso','Cursos','data de finaliza√ß√£o','ao curso','Durabilidade do curso', 'finalizo o curso?','finalizar curso', 'sobre o curso','do curso',' coordena√ß√£o do meu curso','Curso'],
    # Categoria De Certificados e Diploma
    'Certificado/Diploma': ['Certificado','certificado', 'diploma','Diploma'],
    # Categoria de Tranferencia
    'Transfer√™ncia': ['transferir','mudar','Sobre mudar de curso','Transfer√™ncia'],
    # Categoria Sobre Hist√≥ricos
    'Hist√≥rico': ['Historico','Historico escolar', 'Hist√≥rico escolar','Hist√≥rico'],
    # Categoria sobre Est√°gio
    'Est√°gio': ['est√°gio', 'est√°gio remunerado','Est√°gio','Estagio','Est√°gio n√£o obrigatorio','Est√°gio obrigatorio','Est√°gio n√£o obrigat√≥rio','Est√°gio obrigat√≥rio','Carreiras','carreiras','est√°gio obrigat√≥rio','estagio obrigatorio','est√°gio n√£o obrigat√≥rio','estagio n√£o obrigatorio'],
    # Categoria Documento
    'Documentos': ['Documento','documento','Documentos','documentos','Documenta√ß√µes','documenta√ß√µes', 'Documenta√ß√£o','documenta√ß√£o','Comprovante','comprovante','atestado m√©dico','atestado de frequ√™ncia','cnpj','atestado de matr√≠cula'],
    # Categoria Dados para serem modificados
    'Dados Cadastrais': ['Dados cadastrais','dados pessoais','Mudan√ßa','Atualizar','altera√ß√£o do meu nome','Data de nascimento','data de nascimento','Altera√ß√£o de nome','Queria atualizar','Atualizar e-mail'],
    # Categoria Dispensas
    'Dispensas': ['eliminar mat√©rias', 'dispensas','Dispensa','dispensa','Dispensas'],
    # Categoria D√∫vidas
    'D√∫vidas': ['tirar d√∫vidas', 'd√∫vidas','d√∫vida','D√∫vida','D√∫vidas','duvidas','duvida','Duvida'],
    # Categoria Matr√≠culas
    'Matr√≠cula': ['gradua√ß√µes','Gradua√ß√£o','Estudo','Matr√≠cula', 'Matr√≠culas', 'matricula','matriculas','Matricula','Matriculas','fazer algum curso','Estudar','minha vaga'],
    # Categoria sobre as Carteirinhas
    'Carteirinha': ['passe escolar','emtu escolar','carteira','Carteira', 'Carteirinha', 'carteirinha','Cart√£o','cart√£o', 'Bilhete escolar','bilhete escolar','bilhete unico','bilhete √∫nico','Bilhete √∫nico','carteira de meia passagem','Cart√£o de meia passagem','Carteira de meia passagem','cart√£o de meia passagem'],
    # Categoria sobre as Provas e as Notas
    'Avalia√ß√£o/Notas': ['M√©dia','Media','media','m√©dia','notas','Notas','nota','Nota','Notas abaixo da m√©dia','m√©dias','Avalia√ß√£o on-line', 'Pontua√ß√£o','provas','prova','Prova','Provas','recupera√ß√£o','Recupera√ß√£o'],
    # Categoria sobre Aulas e H√≥rarios
    'Aulas/Hor√°rios': ['Aula','Aula inaugural','Aulas','aulas','aula online','f√©rias','F√©rias','in√≠cio das aulas','aulas pendentes','come√ßa as aulas'],
    # Categoria Financeiro/Acordos
    'Financeiro': ['parcelas','Parcelas','parcela','Parcela','cobran√ßa','Cobran√ßa','pend√™ncias','Acordo','acordo','Acordos','acordos','quita√ß√£o','data de vencimento','pagamento','pagamentos','Pagamento','Pagamentos','Boleto','Boletos','boletos','boleto','financeiro','Financeiro','Mensalidade','mensalidade','Contrato','Fatura','fatura','Valores','valores','Consulta de Valores','valores de cursos'],
    # Categoria Biblioteca
    'Minha Biblioteca': ['Biblioteca','biblioteca'],
    # Categoria dos Polos
    'Polos': ['Polo','polo','Polos','polos'],
    # Categoria Secret√°ria Geral: Prouni
    'Secret√°ria Geral': ['Prouni','prouni','ProUni','Secretaria','secretaria','Secret√°ria','secret√°ria'],
    # Acesso E-mails
    'Acesso Emais': ['e-mail institucional','email institucional','recebemos esse e-mail','email estranho','E-mail','sobre esses e-mails'],
    # Pacote Office para os alunos
    'Pacote Office': ['Microsoft','pacote office','usar o Word','Pacote','Word'],
    # Categoria Disciplinas e Turmas
    'Disciplinas/Turmas': ['Disciplinas','Disciplina','disciplinas','disciplina','Enturma√ß√µes','Enturma√ß√£o','enturma√ß√£o','enturma√ß√µes','grade curricular','grade','Grade','Grade curricular','Turma','turma','Turmas','turmas'],
    # Categoria Site
    'Site': ['Site','site'],
    # Categoria An√°lise
    'An√°lise': ['An√°lise','retorno da analise','analises','Retorno an√°lise','An√°lises','analise'],
    # Categoria Suporte
    'Suporte ao Aluno': ['Suporte e Inf. Gerais','Suporte','suporte'],
    # Categoria Bolsas
    'Bolsa': ['analise da bolsa','bolsa','Bolsa'],
    # Categoria Retorno ao Curso
    'Retorno ao Curso': ['Atualiza√ß√£o do meu R A','ativar RA','Atualiza√ß√£o do meu RA','Retorno a gradua√ß√£o hibrida','quero saber se posso voltar','Teria como iniciar novamente o curso','Refazer o curso','Recome√ßar estudos','Reiniciar o curso do in√≠cio','retorno ao curso'],
    # Categoria Ouvidoria
    'Ouvidoria': ['Ouvidoria','ouvidoria'],
    # Bagagens
    'Bagagem': ['bagagem','Bagagem','bagagens'],
    # Jornada Acad√™mica
    'Jornada acad√™mica': ['Jornada acad√™mica','jornada acad√™mica','jornada academica','Jornada Academica','Jornada academica','Jornada Acad√™mica'],
    # Requerimento
    'Requerimento': ['requerimento','Requerimento'],
    # Imagem/Video/Audio
    'img/video': ['{type":"v', '{type":"i','{type":"a'],
    # Categoria Trancar matr√≠cula (Refinado)
    'Trancar matr√≠cula': ['Trancar matr√≠cula', 'Trancar o curso', 'Trancar curso', 'Trancar a faculdade', 'trancar', 'Trancamento','trancamento','Encerrar inscri√ß√£o','Trancar','parar de estudar','tranquei','cancelament','Trancamento de curso','outra institui√ß√£o','troca','trocar','Trocar','Troca',' Tranquei','trancamento do curso','encerrar o curso','cancelamento','Cancelar matricula','cancelar','Cancelamento de matr√≠cula'],
    # Categoria DP/ADAP (Refinado)
    'DP/ADAP': ['DP', 'ADAP', 'dp', 'adap', 'depend√™ncia', 'dependencia'],
    # Categoria Acesso Ava/Aluno online (Refinado)
    'Acesso Ava/Aluno online': ['n√£o consigo logar','n√£o estou conseguindo logar','logar na minha conta','Aluno online','aluno online','acad√™mico','Acad√™mico','academico','Academico','ambienta√ß√£o','Meu login','meu acesso','Ambienta√ß√£o Virtual de Aprendizagem','ambienta√ß√£o','Ambienta√ß√£o','acessar','plataforma','Portal','Senha','Acesso','canva','portal do aluno','acesso','Canvas','login na plataforma','senha do AVA','Ava','ava','AVA', 'acessar o ava', 'acesso', 'acessa','RA','senha do curso', 'aplicativo','Aplicativo','App','app','Senha no aplicativo'],
    # Categoria Material/Conte√∫do (Refinado)
    'Material/Conte√∫do': ['Tarefa','tarefa','Tarefas','tarefas','Prazo','Prazos','prazo','prazos','Atividade','atividades','Atividades','Mat√©rias do curso', 'Mat√©rias', 'materia', 'atividade','Mat√©ria','Envio de trabalho','Exerc√≠cio','Exerc√≠cios','exerc√≠cio','exercicios','exercicio','exerc√≠cio','conte√∫do','Conte√∫do'],
    # Categoria Pr√°tica
    'Pr√°tica Extensionista': ['pr√°tica','Pr√°tica','praticas','PR√ÅTICA EXTENSIONISTA','pr√°ticas extensionistas','Pratica','pratica','Pr√°tica Extensionista'],
    # Categoria Relat√≥rio
    'Relat√≥rio': ['M√°scara de relat√≥rio e libera√ß√£o da pasta star'],
    }

# Fun√ß√£o para categorizar
def categorize_assunto(assunto):
    if not isinstance(assunto, str):
        return 'Outros'
    assunto_lower = assunto.lower()
    for category, patterns in category_patterns.items():
        for pattern in patterns:
            if pattern.lower() in assunto_lower:
                return category
    return 'Outros'

df_ead_limpo['Categoria'] = df_ead_limpo['Assunto'].apply(categorize_assunto)

# --------------------------------------------------------------------------------------------------------------------------------
## Processamento DataFrames (Presencial e Semipresencial)

df_colunas2 = df_pres_semi['A√ß√µes,%,Total'].str.split('|', expand=True).iloc[:, :3]
df_colunas2.columns = ['Nome', 'Telefone', 'Assunto']

df_colunas2['Nome'] = df_colunas2['Nome'].str.replace('Nome:', '', regex=False).str.strip()
df_colunas2['Telefone'] = df_colunas2['Telefone'].str.replace('Telefone:', '', regex=False).str.strip()
df_colunas2['Assunto'] = df_colunas2['Assunto'].str.replace('Assunto:', '', regex=False).str.strip()

df_pres_semi_limpo = df_colunas2.copy()
df_pres_semi_limpo['Tipo'] = 'Outros Presencial/Semi'

category_patterns2 = {
    # Categoria Atendimento
    'Atendimento Humano': ['falar com atendente','atendente','consultor','quero falar com algu√©m','quero falar com uma pessoa'],
    # Categoria Cola√ß√£o de grau/Conclus√£o de Curso
    'Cola√ß√£o de grau/Conclus√£o de Curso': ['Conclus√£o','conclus√£o','Cola√ß√£o de grau','cola√ß√£o de grau','Terminar','Formatura','Cola√ß√£o','Colacao','colacao','cola√ß√£o','formatura'],
    # Categoria de Ativdades Complementares
    'Atividades Complementares':['Hora','hora','Horas','horas','atividade complementar',' Atividade complementar','Hora complementar','Atividades complementares','atividades complementares'],
    # Categoria De Perguntas sobre o Curso
    'Sobre Curso': ['Meu curso','meu curso','Cursos','data de finaliza√ß√£o','ao curso','Durabilidade do curso', 'finalizo o curso?','finalizar curso', 'sobre o curso','do curso',' coordena√ß√£o do meu curso','Curso'],
    # Categoria De Certificados e Diploma
    'Certificado/Diploma': ['Certificado','certificado', 'diploma','Diploma'],
    # Categoria de Tranferencia
    'Transfer√™ncia': ['transferir','mudar','Sobre mudar de curso','Transfer√™ncia','Sair do curso','Trocar faculdade presencial para ead'],
    # Categoria Sobre Hist√≥ricos
    'Hist√≥rico/Declara√ß√µes': ['Historico','Historico escolar', 'Hist√≥rico escolar','Hist√≥rico','declara√ß√£o de estudante','Declara√ß√£o de matr√≠cula'],
    # Categoria sobre Est√°gio
    'Est√°gio': ['Horas de estagio','est√°gio', 'est√°gio remunerado','Est√°gio','Estagio','Est√°gio n√£o obrigatorio','Est√°gio obrigatorio','Est√°gio n√£o obrigat√≥rio','Est√°gio obrigat√≥rio','Carreiras','carreiras','est√°gio obrigat√≥rio','estagio obrigatorio','est√°gio n√£o obrigat√≥rio','estagio n√£o obrigatorio'],
    # Categoria Documento
    'Documentos': ['Documento','documento','Documentos','documentos','Documenta√ß√µes','documenta√ß√µes', 'Documenta√ß√£o','documenta√ß√£o','Comprovante','comprovante','atestado m√©dico','atestado de frequ√™ncia','cnpj','anexo','assinatura','atestado de matr√≠cula'],
    # Categoria Dados para serem modificados
    'Dados Cadastrais': ['Dados cadastrais','dados pessoais','Mudan√ßa','Atualizar','altera√ß√£o do meu nome','Data de nascimento','data de nascimento','Altera√ß√£o de nome','Queria atualizar','Atualizar e-mail'],
    # Categoria Dispensas
    'Dispensas': ['eliminar mat√©rias', 'dispensas','Dispensa','dispensa','Dispensas','eliminar materia'],
    # Categoria D√∫vidas
    'D√∫vidas': ['tirar d√∫vidas', 'd√∫vidas','d√∫vida','D√∫vida','D√∫vidas','duvidas','duvida','Duvida'],
    # Categoria Matr√≠culas
    'Matr√≠cula': ['gradua√ß√µes','Gradua√ß√£o','Estudo','Matr√≠cula', 'Matr√≠culas','Matricula','Matriculas','fazer algum curso','Estudar','cursar'],
    # Categoria sobre as Carteirinhas
    'Carteirinha': ['carteira','Carteira', 'Carteirinha', 'carteirinha'],
    # Categoria sobre as Provas e as Notas
    'Avalia√ß√£o/Notas': ['M√©dia','Media','media','m√©dia','notas','Notas','nota','Nota','Notas abaixo da m√©dia','m√©dias','Avalia√ß√£o on-line', 'Pontua√ß√£o','provas','prova','Prova','Provas','recupera√ß√£o','Recupera√ß√£o'],
    # Categoria sobre Aulas e H√≥rarios
    'Aulas/Hor√°rios': ['Aula','Aula inaugural','Aulas','aulas','aula online','f√©rias','F√©rias','in√≠cio das aulas','aulas pendentes','come√ßa as aulas'],
    # Categoria Financeiro/Acordos
    'Financeiro': ['parcelas','Parcelas','parcela','Parcela','cobran√ßa','Cobran√ßa','pend√™ncias','Acordo','acordo','Acordos','acordos','quita√ß√£o','data de vencimento','pagamento','pagamentos','Pagamento','Pagamentos','Boleto','Boletos','boletos','boleto','financeiro','Financeiro','Mensalidade','mensalidade','Contrato','Fatura','fatura','Valores','valores','Consulta de Valores','valores de cursos'],
    # Categoria Biblioteca
    'Minha Biblioteca': ['Biblioteca','biblioteca'],
    # Categoria dos Polos
    'Polos': ['Polo','polo','Polos','polos'],
    # Categoria Secret√°ria Geral: Prouni
    'Secret√°ria Geral': ['Prouni','prouni','ProUni','Secretaria','secretaria','Secret√°ria','secret√°ria'],
    # Acesso E-mails
    'Acesso Emais': ['e-mail institucional','email institucional','recebemos esse e-mail','email estranho','E-mail','sobre esses e-mails','Senha do email'],
    # Pacote Office para os alunos
    'Pacote Office': ['Microsoft','pacote office','usar o Word','Pacote','Word'],
    # Categoria Disciplinas e Turmas
    'Disciplinas/Turmas': ['Disciplinas','Disciplina','disciplinas','disciplina','Enturma√ß√µes','Enturma√ß√£o','enturma√ß√£o','enturma√ß√µes','grade curricular','grade','Grade','Grade curricular','Turma','turma','Turmas','turmas'],
    # Categoria Site
    'Site': ['Site','site'],
    # Categoria An√°lise
    'An√°lise': ['An√°lise','retorno da analise','analises','Retorno an√°lise','An√°lises','analise'],
    # Categoria Suporte
    'Suporte ao Aluno': ['Suporte e Inf. Gerais','Suporte','suporte'],
    # Categoria Bolsas
    'Bolsa': ['analise da bolsa','bolsa','Bolsa'],
    # Categoria Retorno ao Curso
    'Retorno ao Curso': ['Atualiza√ß√£o do meu R A','ativar RA','Atualiza√ß√£o do meu RA','Retorno a gradua√ß√£o hibrida','quero saber se posso voltar','Teria como iniciar novamente o curso','Refazer o curso','Recome√ßar estudos','Reiniciar o curso do in√≠cio','retorno ao curso'],
    # Categoria Ouvidoria
    'Ouvidoria': ['Ouvidoria','ouvidoria'],
    # Bagagens
    'Bagagem': ['bagagem','Bagagem','bagagens'],
    # Jornada Acad√™mica
    'Jornada acad√™mica': ['Jornada acad√™mica','jornada acad√™mica','jornada academica','Jornada Academica','Jornada academica','Jornada Acad√™mica'],
    # Requerimento
    'Requerimento': ['requerimento','Requerimento'],
    # Imagem/Video/Audio
    'img/video': ['{type":"image/jpeg",', '{type":"i','{type":"a'],
    # Categoria Trancar matr√≠cula (Refinado)
    'Trancar matr√≠cula': ['Trancar matr√≠cula','Trancar matricula','Trancar matr√≠cula', 'Trancar o curso', 'Trancar curso', 'Trancar a faculdade', 'trancar', 'Trancamento','trancamento','Encerrar inscri√ß√£o','Trancar','parar de estudar','tranquei','cancelament','Trancamento de curso','outra institui√ß√£o','troca','trocar','Trocar','Troca',' Tranquei','trancamento do curso','encerrar o curso','cancelamento','Cancelar matricula','cancelar','Cancelamento de matr√≠cula'],
    # Categoria DP/ADAP (Refinado)
    'DP/ADAP': ['DP', 'ADAP', 'dp', 'adap', 'depend√™ncia', 'dependencia',],
    # Categoria Acesso Ava/Aluno online (Refinado)
    'Acesso Ava/Aluno online': ['n√£o consigo logar','n√£o estou conseguindo logar','logar na minha conta','Aluno online','aluno online','acad√™mico','Acad√™mico','academico','Academico','ambienta√ß√£o','Meu login','meu acesso','Ambienta√ß√£o Virtual de Aprendizagem','ambienta√ß√£o','Ambienta√ß√£o','acessar','plataforma','Portal','Senha','Acesso','canva','portal do aluno','acesso','Canvas','login na plataforma','senha do AVA','Ava','ava','AVA', 'acessar o ava', 'acesso', 'acessa','RA','senha do curso', 'aplicativo','Aplicativo','App','app','Senha no aplicativo'],
    # Categoria Material/Conte√∫do (Refinado)
    'Material/Conte√∫do': ['Tarefa','tarefa','Tarefas','tarefas','Prazo','Prazos','prazo','prazos','Atividade','atividades','Atividades','Mat√©rias do curso', 'Mat√©rias', 'materia', 'atividade','Mat√©ria','Envio de trabalho','Exerc√≠cio','Exerc√≠cios','exerc√≠cio','exercicios','exercicio','exerc√≠cio','conte√∫do','Conte√∫do'],
    # Categoria Pr√°tica
    'Pr√°tica Extensionista': ['pr√°tica','Pr√°tica','praticas','PR√ÅTICA EXTENSIONISTA','pr√°ticas extensionistas','Pratica','pratica','Pr√°tica Extensionista'],
    # Categoria Relat√≥rio
    'Relat√≥rio': ['M√°scara de relat√≥rio e libera√ß√£o da pasta star'],
    # VET
    'Veterinario': ['veterinario','Veterinario','dona do','dona da','dono do','dono do','interna√ß√£o','Hospital veterin√°rio'],
    # Cancelamento do Curso
    'Cancelamento do curso': ['cancelamento do curso','cancelamento do meu curso','Cancelamento do curso','cancelar minha matricula','Cancelar matr√≠cula'],
    # Chamadas
    'Lista de Chamada': ['lista de chamada','chamada','trocar minha foto da chamada'],
    # √¥nibus
    'Bilhetes/√înibus fretados': ['servi√ßo de transporte p√∫blico','√¥nibus fretados','Sobre √¥nibus','Passe escolar','passe escolar','emtu escolar','Bilhete escolar','bilhete escolar','bilhete unico','bilhete √∫nico','Bilhete √∫nico','carteira de meia passagem','Cart√£o de meia passagem','Cart√£o','cart√£o','Carteira de meia passagem','cart√£o de meia passagem'],
    # Salas
    'Sobre Salas': ['sobre laborat√≥rios'],
    }

# Fun√ß√£o para categorizar
def categorize_assunto2(assunto):
    if not isinstance(assunto, str):
        return 'Outros'
    assunto_lower = assunto.lower()
    for category, patterns in category_patterns2.items():
        for pattern in patterns:
            if pattern.lower() in assunto_lower:
                return category
    return 'Outros'

df_pres_semi_limpo['Categoria'] = df_pres_semi_limpo['Assunto'].apply(categorize_assunto2)

# --------------------------------------------------------------------------------------------------------------------------------
## Processamento Suporte DataFrames (Ead)

df_colunas3 = df_sup_ead['A√ß√µes,%,Total'].str.split('|', expand=True).iloc[:, :3] 
df_colunas3.columns = ['Nome', 'Telefone', 'Assunto']

df_colunas3['Nome'] = df_colunas3['Nome'].str.replace('Nome:', '', regex=False).str.strip()
df_colunas3['Telefone'] = df_colunas3['Telefone'].str.replace('Telefone:', '', regex=False).str.strip()
df_colunas3['Assunto'] = df_colunas3['Assunto'].str.replace('Assunto:', '', regex=False).str.strip()

df_sup_ead_limpo = df_colunas3.copy()
df_sup_ead_limpo['Tipo'] = 'Suporte EAD' 

# Reutiliza o pattern2/3 para suporte EAD
category_patterns3 = category_patterns2

# Fun√ß√£o para categorizar
def categorize_assunto3(assunto):
    if not isinstance(assunto, str):
        return 'Outros'
    assunto_lower = assunto.lower()
    for category, patterns in category_patterns3.items():
        for pattern in patterns:
            if pattern.lower() in assunto_lower:
                return category
    return 'Outros'

df_sup_ead_limpo['Categoria'] = df_sup_ead_limpo['Assunto'].apply(categorize_assunto3)

# --------------------------------------------------------------------------------------------------------------------------------

## Processamento Suporte DataFrames (Presencial e Semipresencial)

df_colunas4 = df_sup_pres_semi['A√ß√µes,%,Total'].str.split('|', expand=True).iloc[:, :3] 
df_colunas4.columns = ['Nome', 'Telefone', 'Assunto']

df_colunas4['Nome'] = df_colunas4['Nome'].str.replace('Nome:', '', regex=False).str.strip()
df_colunas4['Telefone'] = df_colunas4['Telefone'].str.replace('Telefone:', '', regex=False).str.strip()
df_colunas4['Assunto'] = df_colunas4['Assunto'].str.replace('Assunto:', '', regex=False).str.strip()

df_sup_pres_semi_limpo = df_colunas4.copy()
df_sup_pres_semi_limpo['Tipo'] = 'Suporte Presencial/Semi'

# Reutiliza o pattern2/3 para suporte Presencial/Semi
category_patterns4 = category_patterns2 

# Fun√ß√£o para categorizar
def categorize_assunto4(assunto):
    if not isinstance(assunto, str):
        return 'Outros'
    assunto_lower = assunto.lower()
    for category, patterns in category_patterns4.items():
        for pattern in patterns:
            if pattern.lower() in assunto_lower:
                return category
    return 'Outros'

df_sup_pres_semi_limpo['Categoria'] = df_sup_pres_semi_limpo['Assunto'].apply(categorize_assunto4)

# --------------------------------------------------------------------------------------------------------------------------------

df_total_limpo = pd.concat([df_ead_limpo, df_pres_semi_limpo, df_sup_ead_limpo, df_sup_pres_semi_limpo], ignore_index=True)

# --- Barra Lateral (Filtros) ---
st.sidebar.header("üîç Filtros")


# Filtrar por Categoria 
categorias_disponiveis = sorted(df_total_limpo['Categoria'].unique())
# CORRE√á√ÉO AQUI: Mudando 'default=categorias_disponiveis' para 'default=[]'
categorias_selecionadas = st.sidebar.multiselect(
    "Filtrar por Categoria", categorias_disponiveis, default=[]
)

# --- Prepara o DataFrame Temp ap√≥s o filtro de Categoria ---
df_temp_apos_categoria = df_total_limpo.copy()
if categorias_selecionadas:
    df_temp_apos_categoria = df_temp_apos_categoria[df_temp_apos_categoria['Categoria'].isin(categorias_selecionadas)]

# Filtrar por Nome (opcional)
nomes_disponiveis = sorted(df_temp_apos_categoria['Nome'].unique())
nomes_selecionados = st.sidebar.multiselect(
    "Filtrar por Nome (opcional)", nomes_disponiveis
)

# --- Prepara o DataFrame Temp ap√≥s o filtro de Categoria E Nome ---
df_temp_apos_nome = df_temp_apos_categoria.copy()
if nomes_selecionados:
    df_temp_apos_nome = df_temp_apos_nome[df_temp_apos_nome['Nome'].isin(nomes_selecionados)]

# Filtrar por Telefone (opcional)
telefones_disponiveis = sorted(df_temp_apos_nome['Telefone'].unique())
telefones_selecionados = st.sidebar.multiselect(
    "Filtrar por Telefone (opcional)", telefones_disponiveis
)


# Aplicar filtros (A ORDEM DE APLICA√á√ÉO √â IMPORTANTE)
df_filtrado_global = df_total_limpo.copy()

# 1. Aplica o filtro de Categoria
if categorias_selecionadas:
    df_filtrado_global = df_filtrado_global[df_filtrado_global['Categoria'].isin(categorias_selecionadas)]

# 2. Aplica o filtro de Nome
if nomes_selecionados:
    df_filtrado_global = df_filtrado_global[df_filtrado_global['Nome'].isin(nomes_selecionados)]

# 3. Aplica o filtro de Telefone
if telefones_selecionados:
    df_filtrado_global = df_filtrado_global[df_filtrado_global['Telefone'].isin(telefones_selecionados)]
    
# Separar novamente para gr√°ficos espec√≠ficos (mantido para compatibilidade)
df_ead_filtrado = df_filtrado_global[df_filtrado_global['Tipo'] == 'Outros EAD']
df_pres_semi_filtrado = df_filtrado_global[df_filtrado_global['Tipo'] == 'Outros Presencial/Semi']
df_sup_ead_filtrado = df_filtrado_global[df_filtrado_global['Tipo'] == 'Suporte EAD']
df_sup_pres_semi_filtrado = df_filtrado_global[df_filtrado_global['Tipo'] == 'Suporte Presencial/Semi']


# --- M√âTRICAS PRINCIPAIS ---
st.subheader("M√©tricas Principais")

col1, col2, col3 = st.columns(3)
col1.metric("Total de registros", df_filtrado_global.shape[0])
col2.metric("Categorias", df_filtrado_global['Categoria'].nunique())
col3.metric("Telefones", df_filtrado_global['Telefone'].nunique()) 
st.markdown("---")


# --- GR√ÅFICOS RELAT√ìRIO OUTROS (EAD e Presencial/Semipresencial) ---
st.header("Outros Assuntos")
col_graf1, col_graf2 = st.columns(2)
 
with col_graf1:
    if not df_ead_filtrado.empty:
        grafico_categoria_ead = (
            df_ead_filtrado.groupby('Categoria').size()
            .nlargest(10)
            .sort_values(ascending=False)
            .reset_index(name='Quantidade')
        )
        fig_ead = px.bar(
            grafico_categoria_ead,
            x='Categoria',
            y='Quantidade',
            title='Relat√≥rio - Outros EAD',
            labels={'Categoria': 'Categoria', 'Quantidade': 'Quantidade'}
        )
        fig_ead.update_layout(
            title_x=0.5, 
            xaxis={'categoryorder': 'total descending'}
        )
        st.plotly_chart(fig_ead, use_container_width=True)
    else:
        st.warning("Nenhum dado para exibir em Outros EAD.")
 
with col_graf2:
    if not df_pres_semi_filtrado.empty:
        grafico_categoria_pres_semi = (
            df_pres_semi_filtrado.groupby('Categoria').size()
            .nlargest(10)
            .sort_values(ascending=False)
            .reset_index(name='Quantidade')
        )
        fig_pres_semi = px.bar(
            grafico_categoria_pres_semi,
            x='Categoria', 
            y='Quantidade',
            title='Relat√≥rio - Outros Presencial/Semi',
            labels={'Categoria': 'Categoria', 'Quantidade': 'Quantidade'}
        )
        fig_pres_semi.update_layout(
            title_x=0.5,
            xaxis={'categoryorder': 'total descending'}
        )
        st.plotly_chart(fig_pres_semi, use_container_width=True)
    else:
        st.warning("Nenhum dado para exibir em Outros Presencial/Semi.")


# --- TABELA RELAT√ìRIO OUTROS (EAD e Presencial/Semipresencial) ---

st.subheader("Dados Detalhados - Outros EAD e Presencial/Semipresencial")

col_tab1, col_tab2 = st.columns(2)

with col_tab1:
   
    tabela_ead = df_ead_filtrado

    st.markdown("**Tabela - Outros EAD**")

    if not tabela_ead.empty:
       
        st.dataframe(
            tabela_ead[['Nome', 'Telefone', 'Assunto', 'Categoria']],
            use_container_width=True,
            hide_index=True,
             column_config={
                "Assunto": st.column_config.Column(
                    width=200
                ),
                "Telefone": st.column_config.Column(
                    width="small"
                ),
                "Nome": st.column_config.Column(
                    width="small"
                )
            }
        )
    else:
        st.info("Nenhum dado detalhado de EAD para exibir.")

with col_tab2:
    tabela_pres_semi_resumo = df_pres_semi_filtrado

    st.markdown("**Tabela - Outros Presencial/Semipresencial**")

    if not tabela_pres_semi_resumo.empty:
        st.dataframe(
            tabela_pres_semi_resumo[['Nome', 'Telefone', 'Assunto', 'Categoria']],
            use_container_width=True,
            hide_index=True,
            column_config={
                "Assunto": st.column_config.Column(
                    width=200  # Tente 150. Se ainda n√£o funcionar, tente 100
                ),
             "Telefone": st.column_config.Column(
                    width="small"
                ),
                "Nome": st.column_config.Column(
                    width="small"
                )
            }
        )
    else:
        st.info("Nenhum dado detalhado de Presencial/Semipresencial para exibir.")


# --------------------------------------------------------------------------------------------------------------------------------

# --- GR√ÅFICOS RELAT√ìRIO SUPORTE (EAD e Presencial/Semipresencial) ---
st.header("Suporte ao Aluno - Ead e Presencial/Semipresencial")


col_graf3, col_graf4 = st.columns(2)
 
with col_graf3:
    if not df_ead_filtrado.empty:
        grafico_categoria_sup_ead = (
            df_sup_ead_filtrado.groupby('Categoria').size()
            .nlargest(10)
            .sort_values(ascending=False)
            .reset_index(name='Quantidade')
        )
        fig_sup_ead = px.bar(
            grafico_categoria_sup_ead,
            x='Categoria',
            y='Quantidade',
            title='Relat√≥rio - Suporte EAD',
            labels={'Categoria': 'Categoria', 'Quantidade': 'Quantidade'}
        )
        fig_sup_ead.update_layout(
            title_x=0.5,
            xaxis={'categoryorder': 'total descending'}
        )
        st.plotly_chart(fig_sup_ead, use_container_width=True)
    else:
        st.warning("Nenhum dado para exibir em Suporte EAD.")

with col_graf4:
    if not df_sup_pres_semi_filtrado.empty:
        grafico_sup_pres_semi = (
            df_sup_pres_semi_filtrado.groupby('Categoria').size()
            .nlargest(10)
            .sort_values(ascending=True)
            .reset_index(name='Quantidade')
        )

        fig_sup_pres_semi = px.bar(
            grafico_sup_pres_semi,
            x='Categoria',
            y='Quantidade',
            title='Relat√≥rio - Suporte Presencial/Semi',
            labels={'Categoria': 'Categoria', 'Quantidade': 'Quantidade'}
        )
    
        fig_sup_pres_semi.update_layout(
            title_x=0.5,
            xaxis={'categoryorder': 'total descending'}
        )
        st.plotly_chart(fig_sup_pres_semi, use_container_width=True)
    else:
        st.warning("Nenhum dado para exibir em Suporte Presencial/Semi .")
# --------------------------------------------------------------------------------------------------------------------------------

# --- TABELA RELAT√ìRIO SUPORTE (EAD e Presencial/Semipresencial) ---
st.subheader("Dados Detalhados - Suporte EAD e Presencial/Semipresencial")

col_tab3, col_tab4 = st.columns(2)

with col_tab3:
   
    tabela_sup_ead = df_sup_ead_filtrado

    st.markdown("**Tabela - Suporte EAD**")

    if not tabela_sup_ead.empty:

        st.dataframe(
            tabela_sup_ead[['Nome', 'Telefone', 'Assunto', 'Categoria']],
            use_container_width=True,
            hide_index=True,
            column_config={
                "Assunto": st.column_config.Column(
                    width=200  # Tente 150. Se ainda n√£o funcionar, tente 100
                ),
             "Telefone": st.column_config.Column(
                    width="small"
                ),
                "Nome": st.column_config.Column(
                    width="small"
                )
            }
        )
    else:
        st.info("Nenhum dado detalhado de EAD para exibir.")

with col_tab4:

    tabela_sup_pres_semi = df_sup_pres_semi_filtrado
    
    st.markdown("**Tabela - Suporte Presencial/Semipresencial**")

    if not tabela_sup_pres_semi.empty:

        st.dataframe(
            tabela_sup_pres_semi[['Nome', 'Telefone', 'Assunto', 'Categoria']],
            use_container_width=True,
            hide_index=True,
            column_config={
                "Assunto": st.column_config.Column(
                    width=200  # Tente 150. Se ainda n√£o funcionar, tente 100
                ),
             "Telefone": st.column_config.Column(
                    width="small"
                ),
                "Nome": st.column_config.Column(
                    width="small"
                )
            }
        )
    else:
        st.info("Nenhum dado detalhado de Presencial/Semipresencial para exibir.")
# --------------------------------------------------------------------------------------------------------------------------------
